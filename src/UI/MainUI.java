/*
 * Interface Principal que contém as funcionalidades do programa.
 */
package UI;

import Controller.GeneralController;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author Caldeirão
 */
public class MainUI extends javax.swing.JFrame {

    /**
     * Creates new form MainUI
     */
    public MainUI() {
        this.view = new ViewPanel();
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        ScalePanel = new javax.swing.JPanel();
        jSlider1 = new javax.swing.JSlider();
        jLabel1 = new javax.swing.JLabel();
        ToolsBar = new javax.swing.JToolBar();
        savebutton = new javax.swing.JButton();
        openbutton = new javax.swing.JButton();
        jSeparator7 = new javax.swing.JToolBar.Separator();
        lessZoombutton = new javax.swing.JButton();
        moreZoombutton = new javax.swing.JButton();
        jSeparator8 = new javax.swing.JToolBar.Separator();
        rotate270button = new javax.swing.JButton();
        rotate90button = new javax.swing.JButton();
        rotate180button = new javax.swing.JButton();
        jSeparator9 = new javax.swing.JToolBar.Separator();
        horizontalMirrorbutton = new javax.swing.JButton();
        verticalMirrorbutton = new javax.swing.JButton();
        ViewPanel = new javax.swing.JScrollPane(this.view);
        MenuBar = new javax.swing.JMenuBar();
        Arquivo = new javax.swing.JMenu();
        abrirButton = new javax.swing.JMenuItem();
        salvarButton = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        sairButton = new javax.swing.JMenuItem();
        Filtros = new javax.swing.JMenu();
        negativoButton = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        escurecer = new javax.swing.JMenu();
        escurecerSubButton = new javax.swing.JMenuItem();
        escurecerDivButton = new javax.swing.JMenuItem();
        jSeparator3 = new javax.swing.JPopupMenu.Separator();
        clarear = new javax.swing.JMenu();
        clarearAdButton = new javax.swing.JMenuItem();
        clarearMultButton = new javax.swing.JMenuItem();
        jSeparator4 = new javax.swing.JPopupMenu.Separator();
        blurry = new javax.swing.JMenu();
        mediaPadraoButton = new javax.swing.JMenuItem();
        mediaPonderadaButton = new javax.swing.JMenuItem();
        Laplace = new javax.swing.JMenu();
        laplace4Button = new javax.swing.JMenuItem();
        laplace8Button = new javax.swing.JMenuItem();
        jSeparator5 = new javax.swing.JPopupMenu.Separator();
        PotenciaGammaButton = new javax.swing.JMenuItem();
        reduzirIntensidadeButton = new javax.swing.JMenuItem();
        jSeparator6 = new javax.swing.JPopupMenu.Separator();
        Equalizacao = new javax.swing.JMenu();
        equalizacaoGlobalButton = new javax.swing.JMenuItem();
        equalizacaoLocalButton = new javax.swing.JMenuItem();
        Highlights = new javax.swing.JMenu();
        highlightsPreservandoButton = new javax.swing.JMenuItem();
        highlightsReduzindoButton = new javax.swing.JMenuItem();
        jSeparator10 = new javax.swing.JPopupMenu.Separator();
        pseudocoresButton = new javax.swing.JMenuItem();
        VariarIntensidadeDoCanal = new javax.swing.JMenu();
        vermelhoButton = new javax.swing.JMenuItem();
        verdeButton = new javax.swing.JMenuItem();
        azulButton = new javax.swing.JMenuItem();
        filtroMedianaButton = new javax.swing.JMenuItem();
        Conversoes = new javax.swing.JMenu();
        rgbToHsiButton = new javax.swing.JMenuItem();
        rgbToCmyButton = new javax.swing.JMenuItem();

        jLabel1.setText("0                               5                              10");

        javax.swing.GroupLayout ScalePanelLayout = new javax.swing.GroupLayout(ScalePanel);
        ScalePanel.setLayout(ScalePanelLayout);
        ScalePanelLayout.setHorizontalGroup(
            ScalePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ScalePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(ScalePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jSlider1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        ScalePanelLayout.setVerticalGroup(
            ScalePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ScalePanelLayout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(jSlider1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("PGM-PPM Reader");

        ToolsBar.setRollover(true);

        savebutton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/salvar.png"))); // NOI18N
        savebutton.setFocusable(false);
        savebutton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        savebutton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        savebutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                savebuttonActionPerformed(evt);
            }
        });
        ToolsBar.add(savebutton);

        openbutton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/abrir.png"))); // NOI18N
        openbutton.setFocusable(false);
        openbutton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        openbutton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        openbutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openbuttonActionPerformed(evt);
            }
        });
        ToolsBar.add(openbutton);
        ToolsBar.add(jSeparator7);

        lessZoombutton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/zoom-.png"))); // NOI18N
        lessZoombutton.setText("Zoom -");
        lessZoombutton.setFocusable(false);
        lessZoombutton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        lessZoombutton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        lessZoombutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lessZoombuttonActionPerformed(evt);
            }
        });
        ToolsBar.add(lessZoombutton);

        moreZoombutton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/zoom+.png"))); // NOI18N
        moreZoombutton.setText("Zoom +");
        moreZoombutton.setFocusable(false);
        moreZoombutton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        moreZoombutton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        moreZoombutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moreZoombuttonActionPerformed(evt);
            }
        });
        ToolsBar.add(moreZoombutton);
        ToolsBar.add(jSeparator8);

        rotate270button.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/girar.png"))); // NOI18N
        rotate270button.setText("Girar -90º");
        rotate270button.setFocusable(false);
        rotate270button.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        rotate270button.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        rotate270button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rotate270buttonActionPerformed(evt);
            }
        });
        ToolsBar.add(rotate270button);

        rotate90button.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/girar-inv.png"))); // NOI18N
        rotate90button.setText("Girar 90º");
        rotate90button.setFocusable(false);
        rotate90button.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        rotate90button.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        rotate90button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rotate90buttonActionPerformed(evt);
            }
        });
        ToolsBar.add(rotate90button);

        rotate180button.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/girar-inv.png"))); // NOI18N
        rotate180button.setText("Girar 180º");
        rotate180button.setFocusable(false);
        rotate180button.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        rotate180button.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        rotate180button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rotate180buttonActionPerformed(evt);
            }
        });
        ToolsBar.add(rotate180button);
        ToolsBar.add(jSeparator9);

        horizontalMirrorbutton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/inverte-v.png"))); // NOI18N
        horizontalMirrorbutton.setText("Inveter Horizontalmente");
        horizontalMirrorbutton.setFocusable(false);
        horizontalMirrorbutton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        horizontalMirrorbutton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        horizontalMirrorbutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                horizontalMirrorbuttonActionPerformed(evt);
            }
        });
        ToolsBar.add(horizontalMirrorbutton);

        verticalMirrorbutton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/inverte-h.png"))); // NOI18N
        verticalMirrorbutton.setText("Inverter Verticalmente");
        verticalMirrorbutton.setFocusable(false);
        verticalMirrorbutton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        verticalMirrorbutton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        verticalMirrorbutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                verticalMirrorbuttonActionPerformed(evt);
            }
        });
        ToolsBar.add(verticalMirrorbutton);

        ViewPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        Arquivo.setText("Arquivo");

        abrirButton.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        abrirButton.setText("Abrir");
        abrirButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                abrirButtonActionPerformed(evt);
            }
        });
        Arquivo.add(abrirButton);

        salvarButton.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        salvarButton.setText("Salvar");
        salvarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                salvarButtonActionPerformed(evt);
            }
        });
        Arquivo.add(salvarButton);
        Arquivo.add(jSeparator1);

        sairButton.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F4, java.awt.event.InputEvent.ALT_MASK));
        sairButton.setText("Sair");
        sairButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sairButtonActionPerformed(evt);
            }
        });
        Arquivo.add(sairButton);

        MenuBar.add(Arquivo);

        Filtros.setText("Filtros");

        negativoButton.setText("1 - Negativo");
        negativoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                negativoButtonActionPerformed(evt);
            }
        });
        Filtros.add(negativoButton);
        Filtros.add(jSeparator2);

        escurecer.setText("2 - Escurecer");

        escurecerSubButton.setText("2.1 - Escurecer (Subtração)");
        escurecerSubButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                escurecerSubButtonActionPerformed(evt);
            }
        });
        escurecer.add(escurecerSubButton);

        escurecerDivButton.setText("2.2 - Escurecer (Divisão)");
        escurecerDivButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                escurecerDivButtonActionPerformed(evt);
            }
        });
        escurecer.add(escurecerDivButton);

        Filtros.add(escurecer);
        Filtros.add(jSeparator3);

        clarear.setText("3 - Clarear");

        clarearAdButton.setText("3.1 - Clarear (Adição)");
        clarearAdButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clarearAdButtonActionPerformed(evt);
            }
        });
        clarear.add(clarearAdButton);

        clarearMultButton.setText("3.2 - Clarear (Multiplicação)");
        clarearMultButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clarearMultButtonActionPerformed(evt);
            }
        });
        clarear.add(clarearMultButton);

        Filtros.add(clarear);
        Filtros.add(jSeparator4);

        blurry.setText("4 - Blurry");

        mediaPadraoButton.setText("4.1 - Blurry (Média Padrão)");
        mediaPadraoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mediaPadraoButtonActionPerformed(evt);
            }
        });
        blurry.add(mediaPadraoButton);

        mediaPonderadaButton.setText("4.2 - Blurry (Média Ponderada)");
        mediaPonderadaButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mediaPonderadaButtonActionPerformed(evt);
            }
        });
        blurry.add(mediaPonderadaButton);

        Filtros.add(blurry);

        Laplace.setText("5 - Laplace");

        laplace4Button.setText("5.1 - Laplace (Peso 4)");
        laplace4Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                laplace4ButtonActionPerformed(evt);
            }
        });
        Laplace.add(laplace4Button);

        laplace8Button.setText("5.2 - Laplace (Peso 8)");
        laplace8Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                laplace8ButtonActionPerformed(evt);
            }
        });
        Laplace.add(laplace8Button);

        Filtros.add(Laplace);
        Filtros.add(jSeparator5);

        PotenciaGammaButton.setText("6 - Potência Gamma");
        PotenciaGammaButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PotenciaGammaButtonActionPerformed(evt);
            }
        });
        Filtros.add(PotenciaGammaButton);

        reduzirIntensidadeButton.setText("7 - Reduzir Intensidade");
        reduzirIntensidadeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reduzirIntensidadeButtonActionPerformed(evt);
            }
        });
        Filtros.add(reduzirIntensidadeButton);
        Filtros.add(jSeparator6);

        Equalizacao.setText("8 - Equalização");

        equalizacaoGlobalButton.setText("8.1 - Equalização Global");
        equalizacaoGlobalButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                equalizacaoGlobalButtonActionPerformed(evt);
            }
        });
        Equalizacao.add(equalizacaoGlobalButton);

        equalizacaoLocalButton.setText("8.2 - Equalização Local");
        equalizacaoLocalButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                equalizacaoLocalButtonActionPerformed(evt);
            }
        });
        Equalizacao.add(equalizacaoLocalButton);

        Filtros.add(Equalizacao);

        Highlights.setText("9 - Highlights");

        highlightsPreservandoButton.setText("9.1 - Destaca o intervalo preservando o resto");
        highlightsPreservandoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                highlightsPreservandoButtonActionPerformed(evt);
            }
        });
        Highlights.add(highlightsPreservandoButton);

        highlightsReduzindoButton.setText("9.2 - Destaca o intervalo reduzindo o resto");
        highlightsReduzindoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                highlightsReduzindoButtonActionPerformed(evt);
            }
        });
        Highlights.add(highlightsReduzindoButton);

        Filtros.add(Highlights);
        Filtros.add(jSeparator10);

        pseudocoresButton.setText("10 - Pseudocores");
        pseudocoresButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pseudocoresButtonActionPerformed(evt);
            }
        });
        Filtros.add(pseudocoresButton);

        VariarIntensidadeDoCanal.setText("11 - Variar Intensidade do Canal");

        vermelhoButton.setText("11.1 - Vermelho");
        vermelhoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                vermelhoButtonActionPerformed(evt);
            }
        });
        VariarIntensidadeDoCanal.add(vermelhoButton);

        verdeButton.setText("11.2 - Verde");
        verdeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                verdeButtonActionPerformed(evt);
            }
        });
        VariarIntensidadeDoCanal.add(verdeButton);

        azulButton.setText("11.3 - Azul");
        azulButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                azulButtonActionPerformed(evt);
            }
        });
        VariarIntensidadeDoCanal.add(azulButton);

        Filtros.add(VariarIntensidadeDoCanal);

        filtroMedianaButton.setText("12 - Filtro da Mediana");
        filtroMedianaButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filtroMedianaButtonActionPerformed(evt);
            }
        });
        Filtros.add(filtroMedianaButton);

        MenuBar.add(Filtros);

        Conversoes.setText("Conversões");

        rgbToHsiButton.setText("1 - RGB -> HSI");
        rgbToHsiButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rgbToHsiButtonActionPerformed(evt);
            }
        });
        Conversoes.add(rgbToHsiButton);

        rgbToCmyButton.setText("2 - RGB -> CMY");
        rgbToCmyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rgbToCmyButtonActionPerformed(evt);
            }
        });
        Conversoes.add(rgbToCmyButton);

        MenuBar.add(Conversoes);

        setJMenuBar(MenuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(ViewPanel, javax.swing.GroupLayout.Alignment.TRAILING)
            .addComponent(ToolsBar, javax.swing.GroupLayout.DEFAULT_SIZE, 547, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(ToolsBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ViewPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 486, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    /**
     * Fecha o programa.
     *
     * @author Caldeirão
     */
    private void sairButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sairButtonActionPerformed
        this.dispose();
    }//GEN-LAST:event_sairButtonActionPerformed
    /**
     * Abre uma imagem PGM.
     *
     * @author Caldeirão
     */
    private void abrirButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_abrirButtonActionPerformed
        //Selecionador de arquivos.
        JFileChooser chooser = new JFileChooser();
        //Filtro de formato.
        FileNameExtensionFilter filter = new FileNameExtensionFilter("PGM/PPM", "pgm", "ppm");
        chooser.setFileFilter(filter);
        //Abrindo arquivo.
        int returnVal = chooser.showOpenDialog(null);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            //Lendo arquivo para a classe ImagePGM.
            File file = chooser.getSelectedFile();
            try {
                if (control.readFile(file)) {
                    //Altera o titulo da janela.  
                    this.setTitle("PGM-PPM Reader - " + file.getName());
                    //Desenha.
                    view.cleanImage();
                    view.draw();
                } else {
                    JOptionPane.showMessageDialog(null, "Arquivo não é PGM/PPM!", "ERRO!", JOptionPane.ERROR_MESSAGE);
                }
            } catch (IOException ex) {
                Logger.getLogger(MainUI.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_abrirButtonActionPerformed
    /**
     * Salva uma imagem PGM.
     *
     * @author Caldeirão
     */
    private void salvarButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_salvarButtonActionPerformed
        //Selecionador de arquivos.
        JFileChooser chooser = new JFileChooser(new File("c:\\"));
        //Filtro de formato.
        FileNameExtensionFilter filter = new FileNameExtensionFilter("PGM", "pgm");
        chooser.setFileFilter(filter);
        chooser.setMultiSelectionEnabled(false);
        chooser.setDialogTitle("Save file");
        int result = chooser.showDialog(this, "Salvar");
        if (result == JFileChooser.APPROVE_OPTION) {
            File outputFile = new File(chooser.getSelectedFile().getName() + ".pgm");
            try {
                if (control.saveFile(outputFile)) {
                    JOptionPane.showMessageDialog(null, "Imagem salva!", "SUCESSO!", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    JOptionPane.showMessageDialog(null, "Erro ao salvar arquivo!", "ERRO!", JOptionPane.ERROR_MESSAGE);
                }
            } catch (IOException ex) {
                Logger.getLogger(MainUI.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_salvarButtonActionPerformed

    private void negativoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_negativoButtonActionPerformed
        if (control.getImage() != null) {
            //Aplica o filtro.
            control.negativeFilter();
            //Desenha.
            view.cleanImage();
            view.draw();
        }
    }//GEN-LAST:event_negativoButtonActionPerformed
    /**
     * Filtro escurecer 01.
     *
     * @author Caldeirão
     */
    private void escurecerSubButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_escurecerSubButtonActionPerformed
        if (control.getImage() != null) {
            String value = JOptionPane.showInputDialog("Insira um valor:");
            //Aplica o filtro.
            control.darknedSubFilter(Float.valueOf(value));
            //Desenha.
            view.cleanImage();
            view.draw();
        }
    }//GEN-LAST:event_escurecerSubButtonActionPerformed
    /**
     * Filtro escurecer 02.
     *
     * @author Caldeirão
     */
    private void escurecerDivButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_escurecerDivButtonActionPerformed
        if (control.getImage() != null) {
            String value = JOptionPane.showInputDialog("Insira um valor:");
            //Aplica o filtro.
            control.darknedDivFilter(Float.valueOf(value));
            //Desenha.
            view.cleanImage();
            view.draw();
        }
    }//GEN-LAST:event_escurecerDivButtonActionPerformed
    /**
     * Filtro clarear 01.
     *
     * @author Caldeirão
     */
    private void clarearAdButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clarearAdButtonActionPerformed
        if (control.getImage() != null) {
            String value = JOptionPane.showInputDialog("Insira um valor:");
            //Aplica o filtro.
            control.lightenedAddFilter(Float.valueOf(value));
            //Desenha.
            view.cleanImage();
            view.draw();
        }
    }//GEN-LAST:event_clarearAdButtonActionPerformed
    /**
     * Filtro clarear 02.
     *
     * @author Caldeirão
     */
    private void clarearMultButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clarearMultButtonActionPerformed
        if (control.getImage() != null) {
            String value = JOptionPane.showInputDialog("Insira um valor:");
            //Aplica o filtro.
            control.lightenedMultFilter(Float.valueOf(value));
            //Desenha.
            view.cleanImage();
            view.draw();
        }
    }//GEN-LAST:event_clarearMultButtonActionPerformed

    /**
     * Média padrão.
     *
     * @author Caldeirão
     */
    private void mediaPadraoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mediaPadraoButtonActionPerformed
        if (control.getImage() != null) {
            //Aplica o filtro.
            control.standardAverage();
            //Desenha.
            view.cleanImage();
            view.draw();
        }
    }//GEN-LAST:event_mediaPadraoButtonActionPerformed
    /**
     * Média ponderada.
     *
     * @author Caldeirão
     */
    private void mediaPonderadaButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mediaPonderadaButtonActionPerformed
        if (control.getImage() != null) {
            //Aplica o filtro.
            control.weightedAverage();
            //Desenha.
            view.cleanImage();
            view.draw();
        }
    }//GEN-LAST:event_mediaPonderadaButtonActionPerformed
    /**
     * Laplace com pelo central 4.
     *
     * @author Caldeirão
     */
    private void laplace4ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_laplace4ButtonActionPerformed
        if (control.getImage() != null) {
            //Aplica o filtro.
            control.laplaceFour();
            //Desenha.
            view.cleanImage();
            view.draw();
        }
    }//GEN-LAST:event_laplace4ButtonActionPerformed
    /**
     * Salva uma imagem PGM.
     *
     * @author Caldeirão
     */
    private void savebuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_savebuttonActionPerformed
        //Selecionador de arquivos.
        JFileChooser chooser = new JFileChooser();
        chooser.setMultiSelectionEnabled(false);
        chooser.setDialogTitle("Save file");
        int result = chooser.showDialog(this, "Salvar");
        if (result == JFileChooser.APPROVE_OPTION) {
            File outputFile = new File(chooser.getSelectedFile().getName() + ".pgm");
            try {
                if (control.saveFile(outputFile)) {
                    JOptionPane.showMessageDialog(null, "Imagem salva!", "SUCESSO!", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    JOptionPane.showMessageDialog(null, "Erro ao salvar arquivo!", "ERRO!", JOptionPane.ERROR_MESSAGE);
                }
            } catch (IOException ex) {
                Logger.getLogger(MainUI.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_savebuttonActionPerformed
    /**
     * Espelho horizontal da imagem.
     *
     * @author Caldeirão
     */
    private void horizontalMirrorbuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_horizontalMirrorbuttonActionPerformed
        if (control.getImage() != null) {
            //Aplica o filtro.
            control.horizontalMirror();
            //Desenha.
            view.cleanImage();
            view.draw();
        }
    }//GEN-LAST:event_horizontalMirrorbuttonActionPerformed
    /**
     * Espelho vertical da imagem.
     *
     * @author Caldeirão
     */
    private void verticalMirrorbuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_verticalMirrorbuttonActionPerformed
        if (control.getImage() != null) {
            //Aplica o filtro.
            control.verticalMirror();
            //Desenha.
            view.cleanImage();
            view.draw();
        }
    }//GEN-LAST:event_verticalMirrorbuttonActionPerformed
    /**
     * Abre uma imagem PGM.
     *
     * @author Caldeirão
     */
    private void openbuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openbuttonActionPerformed
        //Selecionador de arquivos.
        JFileChooser chooser = new JFileChooser();
        //Filtro de formato.
        FileNameExtensionFilter filter = new FileNameExtensionFilter("PGM/PPM", "pgm", "ppm");
        chooser.setFileFilter(filter);
        //Abrindo arquivo.
        int returnVal = chooser.showOpenDialog(null);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            //Lendo arquivo para a classe ImagePGM.
            File file = chooser.getSelectedFile();
            try {
                if (control.readFile(file)) {
                    //Altera o titulo da janela.  
                    this.setTitle("PGM-PPM Reader - " + file.getName());
                    //Desenha.
                    view.cleanImage();
                    view.draw();
                } else {
                    JOptionPane.showMessageDialog(null, "Arquivo não é PGM/PPM!", "ERRO!", JOptionPane.ERROR_MESSAGE);
                }
            } catch (IOException ex) {
                Logger.getLogger(MainUI.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_openbuttonActionPerformed
    /**
     * Zoom +.
     *
     * @author Caldeirão
     */
    private void moreZoombuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moreZoombuttonActionPerformed
        if ((control.getImage() != null) && (zoomTrigger == false)) {
            //Aplica o filtro.
            control.zoom(2);
            zoomTrigger = true;
            //Desenha.
            view.cleanImage();
            view.draw();
        }
    }//GEN-LAST:event_moreZoombuttonActionPerformed
    /**
     * Filtro rotacionar 270º.
     *
     * @author Caldeirão
     */
    private void rotate270buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rotate270buttonActionPerformed
        if (control.getImage() != null) {
            //Aplica o filtro.
            control.rotateImage(-1);
            //Desenha.
            view.cleanImage();
            view.draw();
        }
    }//GEN-LAST:event_rotate270buttonActionPerformed
    /**
     * Filtro rotacionar 180º.
     *
     * @author Caldeirão
     */
    private void rotate180buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rotate180buttonActionPerformed
        if (control.getImage() != null) {
            //Aplica o filtro.
            control.rotateImage(2);
            //Desenha.
            view.cleanImage();
            view.draw();
        }
    }//GEN-LAST:event_rotate180buttonActionPerformed
    /**
     * Filtro rotacionar 90º.
     *
     * @author Caldeirão
     */
    private void rotate90buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rotate90buttonActionPerformed
        if (control.getImage() != null) {
            //Aplica o filtro.
            control.rotateImage(1);
            //Desenha.
            view.cleanImage();
            view.draw();
        }
    }//GEN-LAST:event_rotate90buttonActionPerformed
    /**
     * Zoom -.
     *
     * @author Caldeirão
     */
    private void lessZoombuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lessZoombuttonActionPerformed
        if (control.getImage() != null) {
            //Aplica o filtro.
            control.lessZoom();
            zoomTrigger = false;
            //Desenha.
            view.cleanImage();
            view.draw();
        }
    }//GEN-LAST:event_lessZoombuttonActionPerformed
    /**
     * Potência gamma.
     *
     * @author Caldeirão
     */
    private void PotenciaGammaButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PotenciaGammaButtonActionPerformed
        if (control.getImage() != null) {
            String value = JOptionPane.showInputDialog("Insira um valor:");
            //Aplica o filtro.
            control.gammaPow(Float.valueOf(value));
            //Desenha.
            view.cleanImage();
            view.draw();
        }
    }//GEN-LAST:event_PotenciaGammaButtonActionPerformed
    /**
     * Método que reduz a intensidade da imagem.
     *
     * @author Caldeirão
     */
    private void reduzirIntensidadeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reduzirIntensidadeButtonActionPerformed
        if (control.getImage() != null) {
            //Aplica o filtro.
            String value = JOptionPane.showInputDialog("Insira um valor:");
            control.intensityReduction(Integer.valueOf(value));
            //Desenha.
            view.cleanImage();
            view.draw();
        }
    }//GEN-LAST:event_reduzirIntensidadeButtonActionPerformed
    /**
     * Equalização global.
     *
     * @author Caldeirão
     */
    private void equalizacaoGlobalButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_equalizacaoGlobalButtonActionPerformed
        if (control.getImage() != null) {
            //Aplica o filtro.
            control.createHistogram();
            control.globalEqualization();
            //Desenha.
            view.cleanImage();
            view.draw();
        }
    }//GEN-LAST:event_equalizacaoGlobalButtonActionPerformed
    /**
     * Método de Potência de gamma que intensifica os valores no intervalo e
     * preserva os outros valores.
     *
     * @author Caldeirão
     */
    private void highlightsPreservandoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_highlightsPreservandoButtonActionPerformed
        if (control.getImage() != null) {
            String value = JOptionPane.showInputDialog("Insira um valor mínimo do intervalo:");
            int min = Integer.valueOf(value);
            value = JOptionPane.showInputDialog("Insira um valor mínimo do intervalo:");
            int max = Integer.valueOf(value);
            control.highlightsRangeAndPreserveRest(min, max);
            //Desenha.
            view.cleanImage();
            view.draw();
        }
    }//GEN-LAST:event_highlightsPreservandoButtonActionPerformed
    /**
     * Método de Potência de gamma que intensifica os valores no intervalo e
     * reduz ao minimo os outros valores.
     *
     * @author Caldeirão
     */
    private void highlightsReduzindoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_highlightsReduzindoButtonActionPerformed
        if (control.getImage() != null) {
            String value = JOptionPane.showInputDialog("Insira um valor mínimo do intervalo:");
            int min = Integer.valueOf(value);
            value = JOptionPane.showInputDialog("Insira um valor mínimo do intervalo:");
            int max = Integer.valueOf(value);
            control.highlightsRangeAndLowerRest(min, max);
            //Desenha.
            view.cleanImage();
            view.draw();
        }
    }//GEN-LAST:event_highlightsReduzindoButtonActionPerformed
    /**
     * Equalização global.
     *
     * @author Caldeirão
     */
    private void equalizacaoLocalButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_equalizacaoLocalButtonActionPerformed
        if (control.getImage() != null) {
            //Aplica o filtro.
            control.createHistogram();
            control.localEqualization();
            //Desenha.
            view.cleanImage();
            view.draw();
        }
    }//GEN-LAST:event_equalizacaoLocalButtonActionPerformed
    /**
     * Laplace com pelo central 8.
     *
     * @author Caldeirão
     */
    private void laplace8ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_laplace8ButtonActionPerformed
        if (control.getImage() != null) {
            //Aplica o filtro.
            control.laplaceEight();
            //Desenha.
            view.cleanImage();
            view.draw();
        }
    }//GEN-LAST:event_laplace8ButtonActionPerformed
    /**
     * Método que converte o modelo de cor da imagem de RGB para HSI.
     *
     * @author Caldeirão
     * @param newIntensity
     */
    private void rgbToHsiButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rgbToHsiButtonActionPerformed
        if (control.getImage() != null) {
            //Aplica o filtro.
            control.rgbToHsi();
            //Desenha.
            view.cleanImage();
            view.draw();
        }
    }//GEN-LAST:event_rgbToHsiButtonActionPerformed
    /**
     * Método que converte o modelo de cor da imagem de RGB para CMY.
     *
     * @author Caldeirão
     */
    private void rgbToCmyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rgbToCmyButtonActionPerformed
        if (control.getImage() != null) {
            //Aplica o filtro.
            control.rgbToCmy();
            //Desenha.
            view.cleanImage();
            view.draw();
        }
    }//GEN-LAST:event_rgbToCmyButtonActionPerformed
    /**
     * Método que aumenta a tonalizade vermelha.
     *
     * @author Caldeirão
     */
    private void vermelhoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_vermelhoButtonActionPerformed
        if (control.getImage() != null) {
            String value = JOptionPane.showInputDialog("Insira um valor:");
            //Aplica o filtro.
            control.moreRed(Float.valueOf(value));
            //Desenha.
            view.cleanImage();
            view.draw();
        }
    }//GEN-LAST:event_vermelhoButtonActionPerformed
    /**
     * Método que aumenta a tonalizade verde.
     *
     * @author Caldeirão
     */
    private void verdeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_verdeButtonActionPerformed
        if (control.getImage() != null) {
            String value = JOptionPane.showInputDialog("Insira um valor:");
            //Aplica o filtro.
            control.moreGreen(Float.valueOf(value));
            //Desenha.
            view.cleanImage();
            view.draw();
        }
    }//GEN-LAST:event_verdeButtonActionPerformed
    /**
     * Método que aumenta a tonalizade azul.
     *
     * @author Caldeirão
     */
    private void azulButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_azulButtonActionPerformed
        if (control.getImage() != null) {
            String value = JOptionPane.showInputDialog("Insira um valor:");
            //Aplica o filtro.
            control.moreBlue(Float.valueOf(value));
            //Desenha.
            view.cleanImage();
            view.draw();
        }
    }//GEN-LAST:event_azulButtonActionPerformed
    /**
     * Método que atribui pseudocores à uma foto em tons de cinza.
     *
     * @author Caldeirão 
     */
    private void pseudocoresButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pseudocoresButtonActionPerformed
        if (control.getImage() != null) {
            //Aplica o filtro.
            control.pseudocolors();
            //Desenha.
            view.cleanImage();
            view.draw();
        }
    }//GEN-LAST:event_pseudocoresButtonActionPerformed

    private void filtroMedianaButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filtroMedianaButtonActionPerformed
        if (control.getImage() != null) {
            String value = JOptionPane.showInputDialog("Insira um valor:");
            //Aplica o filtro.
            control.medianFilter(Float.valueOf(value));
            //Desenha.
            view.cleanImage();
            view.draw();
        }
    }//GEN-LAST:event_filtroMedianaButtonActionPerformed
//==============================================================================
//============================= View Class =====================================    
//==============================================================================    

    /**
     * Classe view responsavel por desenhar a imagem no painel do programa.
     *
     * @author Caldeirão
     */
    public class ViewPanel extends JPanel {

        private BufferedImage bufferedImage;

        @Override
        public void paintComponent(java.awt.Graphics g) {
            super.paintComponent(g);
            java.awt.Graphics2D g2d = (java.awt.Graphics2D) g.create();

            if (control.getImage() != null && this.bufferedImage == null) {
                ViewPanel.setSize(control.getImage().getWidth() + 1, control.getImage().getHeight() + 1);
                this.bufferedImage = control.drawImage();
            }

            if (this.bufferedImage != null) {
                g2d.drawImage(this.bufferedImage, 0, 0, null);
            }
            g2d.dispose();
        }

        public void draw() {
            this.repaint();
        }

        public void cleanImage() {
            this.bufferedImage = null;
        }
    }

//==============================================================================
//==============================================================================      
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new MainUI().setVisible(true);
        });
    }

    //Variaveis adicionais  
    private SliderUI slider;
    private boolean zoomTrigger = false;
    private final ViewPanel view;
    private final GeneralController control = new GeneralController();
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu Arquivo;
    private javax.swing.JMenu Conversoes;
    private javax.swing.JMenu Equalizacao;
    private javax.swing.JMenu Filtros;
    private javax.swing.JMenu Highlights;
    private javax.swing.JMenu Laplace;
    private javax.swing.JMenuBar MenuBar;
    private javax.swing.JMenuItem PotenciaGammaButton;
    private javax.swing.JPanel ScalePanel;
    private javax.swing.JToolBar ToolsBar;
    private javax.swing.JMenu VariarIntensidadeDoCanal;
    private javax.swing.JScrollPane ViewPanel;
    private javax.swing.JMenuItem abrirButton;
    private javax.swing.JMenuItem azulButton;
    private javax.swing.JMenu blurry;
    private javax.swing.JMenu clarear;
    private javax.swing.JMenuItem clarearAdButton;
    private javax.swing.JMenuItem clarearMultButton;
    private javax.swing.JMenuItem equalizacaoGlobalButton;
    private javax.swing.JMenuItem equalizacaoLocalButton;
    private javax.swing.JMenu escurecer;
    private javax.swing.JMenuItem escurecerDivButton;
    private javax.swing.JMenuItem escurecerSubButton;
    private javax.swing.JMenuItem filtroMedianaButton;
    private javax.swing.JMenuItem highlightsPreservandoButton;
    private javax.swing.JMenuItem highlightsReduzindoButton;
    private javax.swing.JButton horizontalMirrorbutton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator10;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JPopupMenu.Separator jSeparator3;
    private javax.swing.JPopupMenu.Separator jSeparator4;
    private javax.swing.JPopupMenu.Separator jSeparator5;
    private javax.swing.JPopupMenu.Separator jSeparator6;
    private javax.swing.JToolBar.Separator jSeparator7;
    private javax.swing.JToolBar.Separator jSeparator8;
    private javax.swing.JToolBar.Separator jSeparator9;
    private javax.swing.JSlider jSlider1;
    private javax.swing.JMenuItem laplace4Button;
    private javax.swing.JMenuItem laplace8Button;
    private javax.swing.JButton lessZoombutton;
    private javax.swing.JMenuItem mediaPadraoButton;
    private javax.swing.JMenuItem mediaPonderadaButton;
    private javax.swing.JButton moreZoombutton;
    private javax.swing.JMenuItem negativoButton;
    private javax.swing.JButton openbutton;
    private javax.swing.JMenuItem pseudocoresButton;
    private javax.swing.JMenuItem reduzirIntensidadeButton;
    private javax.swing.JMenuItem rgbToCmyButton;
    private javax.swing.JMenuItem rgbToHsiButton;
    private javax.swing.JButton rotate180button;
    private javax.swing.JButton rotate270button;
    private javax.swing.JButton rotate90button;
    private javax.swing.JMenuItem sairButton;
    private javax.swing.JMenuItem salvarButton;
    private javax.swing.JButton savebutton;
    private javax.swing.JMenuItem verdeButton;
    private javax.swing.JMenuItem vermelhoButton;
    private javax.swing.JButton verticalMirrorbutton;
    // End of variables declaration//GEN-END:variables
}
